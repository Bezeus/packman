#Использовать strings
#Использовать v8runner
#Использовать tempfiles
#Использовать asserts

Перем Лог;
Перем ВФ;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Создание дистрибутива по версии в хранилище");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "КаталогСборки", "Выходной каталог, в котором будут размещены файлы поставки");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "АдресХранилища", "Хранилище конфигурации 1С из которого выполняется сборка");
    // TODO - с помощью tool1cd можно получить из хранилища
    // на больших историях версий получается массивный xml дамп таблицы
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "ВерсияКонфигурации", "Номер версии в метаданных");
    // TODO с помощью tool1cd можно не применять авторизацию
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-user", "Пользователь хранилища 1С");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-pwd", "Пароль пользователя хранилища 1С (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-v", "Версия в хранилище, которую включаем в дистрибутив (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-cfu-basedir", "Каталог предыдущих версий для создания CFU (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-update-from", "Перечень версий, через запятую, включаемых в обновление (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-output-dir", "Выходной каталог (по умолчанию - текущий каталог)");
	Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-setup", "Собирать дистрибутив вида setup.exe");
    Парсер.ДобавитьПараметрФлагКоманды(ОписаниеКоманды, "-files", "Собирать дистрибутив вида 'файлы поставки'"); 
    Парсер.ДобавитьКоманду(ОписаниеКоманды);
    
КонецПроцедуры

// Выполняет логику команды
//
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    
    Параметры = РазобратьПараметры(ПараметрыКоманды);
    
    Попытка
    	СоздатьДистрибутив(Параметры);
    Исключение
		ВФ.Удалить();
		ВызватьИсключение;
    КонецПопытки;

	ВФ.Удалить();
    
КонецФункции

Процедура СоздатьДистрибутив(Знач Параметры)
	
	ФайлВерсии = ПолучитьИмяВременногоФайла(".cf");
    ВыгрузитьВерсиюИзХранилища(Параметры.АдресХранилища, Параметры.ВерсияХранилища, ФайлВерсии, Параметры.ПользовательХранилища, Параметры.ПарольХранилища);
    
    ФайлТест = Новый Файл(ФайлВерсии);
    Ожидаем.Что(ФайлТест.Существует(), "Должен существовать выгруженный файл версии");
    
    ВремКаталог = "";
	УправлениеКонфигуратором = ПолучитьКонфигуратор(ВремКаталог);
	Лог.Информация("Загружаю версию во временную базу");
	УправлениеКонфигуратором.ЗагрузитьКонфигурациюИзФайла(ФайлВерсии, Истина);
	Лог.Информация(УправлениеКонфигуратором.ВыводКоманды());
	
	ФайлыПоставщика = СоздатьФайлыКонфигурацииПоставщика(УправлениеКонфигуратором, Параметры);
	
КонецПроцедуры

Функция СоздатьФайлыКонфигурацииПоставщика(Знач УправлениеКонфигуратором, Знач Параметры)
    ИмяФайлаПоставки = УправлениеКонфигуратором.КаталогСборки() + "\1cv8.cf";
	Параметры = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	Параметры.Добавить("/CreateDistributionFiles");
	Параметры.Добавить("-cffile """+ИмяФайлаПоставки+"""");
	
	ФайлыПредыдущихВерсий = НайтиФайлыПредыдущихВерсий(Параметры.КаталогВерсий, Параметры.ПредыдущиеВерсии);
	Если ФайлыПредыдущихВерсий <> Неопределено Тогда
		ИмяФайлаОбновления = УправлениеКонфигуратором.КаталогСборки() + "\1cv8.cfu";
		Параметры.Добавить("-cfufile """+ИмяФайлаОбновления+"""");
		
		Для Каждого ФайлПредыдущейВерсии Из ФайлыПредыдущихВерсий Цикл
			Лог.Информация("Добавляю обновление из файла: " + ФайлПредыдущейВерсии.ПолноеИмя);
			Параметры.Добавить("-f """ + ФайлПредыдущейВерсии.ПолноеИмя + """");
		КонецЦикла;
		
	КонецЕсли;
	
	УправлениеКонфигуратором.ВыполнитьКоманду(Параметры);
	Сообщить(УправлениеКонфигуратором.ВыводКоманды());
    
    Возврат Новый Структура("ИмяФайлаПоставки,ИмяФайлаОбновления", ИмяФайлаПоставки, ИмяФайлаОбновления);
    
КонецФункции // СоздатьФайлыКонфигурацииПоставщика()

Функция НайтиФайлыПредыдущихВерсий(Знач КаталогПредыдущихВерсий, Знач ВерсииОбновления)
	
	Если КаталогПредыдущихВерсий = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Каталог = Новый Файл(КаталогПредыдущихВерсий);
	Если Не Каталог.Существует() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлыКонфигураций = Новый Массив;
	
	Для Каждого Версия Из ВерсииОбновления Цикл
		КаталогВерсии = Новый Файл(ОбъединитьПути(КаталогПредыдущихВерсий, Версия));
		Если Не КаталогВерсии.Существует() Тогда
			Текст = СтрШаблон("Каталог версии %1 не найден", КаталогВерсии.ПолноеИмя);
			Лог.Ошибка(Текст);
			ВызватьИсключение Текст;
		КонецЕсли;
		
		ФайлыКонфигурацийВерсии = НайтиФайлы(КаталогВерсии, "*.cf", Истина);
		Для Каждого ФайлВерсии Из ФайлыКонфигурацийВерсии Цикл
			ФайлыКонфигураций.Добавить(ФайлВерсии);
		КонецЦикла;
	КонецЦикла;
	
	Если ФайлыКонфигураций.Количество() Тогда
		Возврат ФайлыКонфигураций;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// экспортная для целей тестирования
Функция РазобратьПараметры(Знач ПараметрыКоманды) Экспорт
    
    Результат = Новый Структура;
    
    Если ПустаяСтрока(ПараметрыКоманды["КаталогСборки"]) Тогда
        ВызватьИсключение "Не задан каталог сборки";
    КонецЕсли;
    
    Если ПустаяСтрока(ПараметрыКоманды["АдресХранилища"]) Тогда
        ВызватьИсключение "Не задан адрес хранилища";
    КонецЕсли;
    
    Если ПустаяСтрока(ПараметрыКоманды["ВерсияКонфигурации"]) Тогда
        ВызватьИсключение "Не задана версия конфигурации";
    КонецЕсли;
    
    Результат.Вставить("КаталогСборки", ПараметрыКоманды["КаталогСборки"]);
    Результат.Вставить("АдресХранилища", ПараметрыКоманды["АдресХранилища"]);
    Результат.Вставить("ВерсияКонфигурации", ПараметрыКоманды["ВерсияКонфигурации"]);
    Результат.Вставить("ПользовательХранилища", ПараметрыКоманды["-storage-user"]);
    Результат.Вставить("ПарольХранилища", ПараметрыКоманды["-storage-pwd"]);
    Результат.Вставить("ВерсияХранилища", ПараметрыКоманды["-storage-v"]);
    Результат.Вставить("КаталогВерсий", ПараметрыКоманды["-cfu-basedir"]);
    Результат.Вставить("ВыходнойКаталог", ПараметрыКоманды["-output-dir"]);
    Результат.Вставить("СобиратьИнсталлятор", ПараметрыКоманды["-setup"]);
    Результат.Вставить("СобиратьФайлыПоставки", ПараметрыКоманды["-files"]);
    
    МассивВерсий = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(
        Строка(ПараметрыКоманды["-update-from"]),
        ",",
        Ложь,
        Истина);
    
    Результат.Вставить("ПредыдущиеВерсии", МассивВерсий);
    
    
    Возврат Результат;
    
КонецФункции

Процедура ВыгрузитьВерсиюИзХранилища(Знач АдресХранилища,
    Знач ВерсияХранилища,
    Знач ВыходнойФайл,
    Знач ПользовательХранилища = Неопределено,
    Знач ПарольХранилища = Неопределено) Экспорт
    
	ВременныйКаталог = "";
    Конфигуратор = ПолучитьКонфигуратор(ВременныйКаталог);
    
    Лог.Отладка("Выгружаю версию из хранилища");
    
    Конфигуратор.ПолучитьВерсиюИзХранилища(
        АдресХранилища,
        ПользовательХранилища,
        ПарольХранилища,
        ВерсияХранилища);
        
    Лог.Отладка("Копирую файл версии");
    КопироватьФайл(ОбъединитьПути(ВременныйКаталог, "source.cf"), ВыходнойФайл);
    
    ВФ.Удалить();
    Лог.Отладка("Удален временный каталог: " + ВременныйКаталог);
КонецПроцедуры

Функция ПолучитьКонфигуратор(РабочийКаталог = "")
	
	Если ПустаяСтрока(РабочийКаталог) Тогда
		РабочийКаталог = ВФ.СоздатьКаталог();
	    Лог.Отладка("Создан временный каталог: " + РабочийКаталог);
	КонецЕсли;
	
	Конфигуратор = Новый УправлениеКонфигуратором();
    Конфигуратор.КаталогСборки(РабочийКаталог);
	
	Возврат Конфигуратор;
	
КонецФункции // ПолучитьКонфигуратор()

//////////////////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());
ВФ = Новый МенеджерВременныхФайлов;