#Использовать strings
#Использовать v8runner
#Использовать tempfiles

Перем Лог;

///////////////////////////////////////////////////////////////////////////////////////////////////
// Прикладной интерфейс

Процедура ЗарегистрироватьКоманду(Знач ИмяКоманды, Знач Парсер) Экспорт
	
    ОписаниеКоманды = Парсер.ОписаниеКоманды(ИмяКоманды, "Создание файла манифеста");
	Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "КаталогСборки", "Выходной каталог, в котором будут размещены файлы поставки");
    Парсер.ДобавитьПозиционныйПараметрКоманды(ОписаниеКоманды, "АдресХранилища", "Хранилище конфигурации 1С из которого выполняется сборка");
    // TODO - с помощью tool1cd можно получить из хранилища
    // на больших историях версий получается массивный xml дамп таблицы
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "ВерсияКонфигурации", "Номер версии в метаданных");
    // TODO с помощью tool1cd можно не применять авторизацию
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-user", "Пользователь хранилища 1С");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-pwd", "Пароль пользователя хранилища 1С (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-storage-v", "Версия в хранилище, которую включаем в дистрибутив (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-cfu-basedir", "Каталог предыдущих версий для создания CFU (опционально)");
    Парсер.ДобавитьИменованныйПараметрКоманды(ОписаниеКоманды, "-update-from", "Перечень версий, через запятую, включаемых в обновление (опционально)");
	Парсер.ДобавитьКоманду(ОписаниеКоманды);
    
КонецПроцедуры

// Выполняет логику команды
// 
// Параметры:
//   ПараметрыКоманды - Соответствие ключей командной строки и их значений
//
Функция ВыполнитьКоманду(Знач ПараметрыКоманды) Экспорт
    ВызватьИсключение "Не реализовано"
КонецФункции

// экспортная для целей тестирования
Функция РазобратьПараметры(Знач ПараметрыКоманды) Экспорт
    
    Результат = Новый Структура;
    
    Если ПустаяСтрока(ПараметрыКоманды["КаталогСборки"]) Тогда
        ВызватьИсключение "Не задан каталог сборки";
    КонецЕсли;
    
    Если ПустаяСтрока(ПараметрыКоманды["АдресХранилища"]) Тогда
        ВызватьИсключение "Не задан адрес хранилища";
    КонецЕсли;
    
    Если ПустаяСтрока(ПараметрыКоманды["ВерсияКонфигурации"]) Тогда
        ВызватьИсключение "Не задана версия конфигурации";
    КонецЕсли;
    
    Результат.Вставить("КаталогСборки", ПараметрыКоманды["КаталогСборки"]);
    Результат.Вставить("АдресХранилища", ПараметрыКоманды["АдресХранилища"]);
    Результат.Вставить("ВерсияКонфигурации", ПараметрыКоманды["ВерсияКонфигурации"]);
    Результат.Вставить("ПользовательХранилища", ПараметрыКоманды["-storage-user"]);
    Результат.Вставить("ПарольХранилища", ПараметрыКоманды["-storage-pwd"]);
    Результат.Вставить("ВерсияХранилища", ПараметрыКоманды["-storage-v"]);
    Результат.Вставить("КаталогВерсий", ПараметрыКоманды["-cfu-basedir"]);
    
    МассивВерсий = СтроковыеФункции.РазложитьСтрокуВМассивПодстрок(
        Строка(ПараметрыКоманды["-update-from"]), 
        ",",
        Ложь,
        Истина);
    
    Результат.Вставить("ПредыдущиеВерсии", МассивВерсий);
    
    Возврат Результат;
    
КонецФункции

Процедура ВыгрузитьВерсиюИзХранилища(Знач АдресХранилища, 
    Знач ВерсияХранилища, 
    Знач ВыходнойФайл, 
    Знач ПользовательХранилища = Неопределено,
    Знач ПарольХранилища = Неопределено) Экспорт
    
    ВФ = Новый МенеджерВременныхФайлов;
    ВременныйКаталог = ВФ.СоздатьКаталог();
    
    Лог.Отладка("Создан временный каталог: " + ВременныйКаталог);
    
    Конфигуратор = Новый УправлениеКонфигуратором();
    Конфигуратор.КаталогСборки(ВременныйКаталог);
    
    Лог.Отладка("Выгружаю версию из хранилища");
    
    Конфигуратор.ПолучитьВерсиюИзХранилища(
        АдресХранилища,
        ПользовательХранилища,
        ПарольХранилища,
        ВерсияХранилища);
        
    Лог.Отладка("Копирую файл версии");
    КопироватьФайл(ОбъединитьПути(ВременныйКаталог, "source.cf"), ВыходнойФайл);
    
    ВФ.Удалить();
    Лог.Отладка("Удален временный каталог: " + ВременныйКаталог);
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////

Лог = Логирование.ПолучитьЛог(ПараметрыСистемы.ИмяЛогаСистемы());